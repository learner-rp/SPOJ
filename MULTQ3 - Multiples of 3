// MULTQ3 - Multiples of 3

#include <bits/stdc++.h>
using namespace std;
#define MAX 100005
 
struct ty{
    int r0,r1,r2;
    void rotate(){
        int temp=r2;
        r2=r1;
        r1=r0;
        r0=temp;
    };
};
 
ty tree[3*MAX];
int lazy[3*MAX];
 
void build(int node,int start,int end){
    if(start==end){
        tree[node].r0=1;
        tree[node].r1=0;
        tree[node].r2=0;
        return ;
    }
    int mid=(start+end)/2;
    build(2*node+1,start,mid);
    build(2*node+2,mid+1,end);
    tree[node].r0=tree[2*node+1].r0+tree[2*node+2].r0;
    tree[node].r1=tree[2*node+1].r1+tree[2*node+2].r1;
    tree[node].r2=tree[2*node+1].r2+tree[2*node+2].r2;
}
 
void update(int node,int start,int end,int l,int r){
    if(lazy[node]!=0){
        if(lazy[node]%3==1)
            tree[node].rotate();
        else if(lazy[node]%3==2){
            tree[node].rotate();
            tree[node].rotate();
        }
        if(start!=end){
            lazy[2*node+1]=(lazy[2*node+1]%3+lazy[node]%3)%3;
            lazy[2*node+2]=(lazy[2*node+2]%3+lazy[node]%3)%3;
        }
        lazy[node]=0;
    }
    if(start>end||r<start||l>end) return ;
    if(l<=start&&end<=r){
        tree[node].rotate();
        if(start!=end){
            lazy[2*node+1]=(1+lazy[2*node+1]%3)%3;
            lazy[2*node+2]=(1+lazy[2*node+2]%3)%3;
        }
        return;
    }
    int mid=(start+end)/2;
    update(2*node+1,start,mid,l,r);
    update(2*node+2,mid+1,end,l,r);
    tree[node].r0=tree[2*node+1].r0+tree[2*node+2].r0;
    tree[node].r1=tree[2*node+1].r1+tree[2*node+2].r1;
    tree[node].r2=tree[2*node+1].r2+tree[2*node+2].r2;
}
 
int query(int node,int start,int end,int l,int r){
    if(r<start||l>end) return 0;
    
    if(lazy[node]!=0){
        if(lazy[node]%3==1)
            tree[node].rotate();
        else if(lazy[node]%3==2){
            tree[node].rotate();
            tree[node].rotate();
        }
        if(start!=end){
            lazy[2*node+1]=(lazy[2*node+1]%3+lazy[node]%3)%3;
            lazy[2*node+2]=(lazy[2*node+2]%3+lazy[node]%3)%3;
        }
        lazy[node]=0;
    }
    
    if(start>=l&&end<=r) return tree[node].r0;
    int mid=(start+end)/2;
    int p1=query(2*node+1,start,mid,l,r);
    int p2=query(2*node+2,mid+1,end,l,r);
    return p1+p2;
}
 
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n,q,y,a,b;
    cin>>n>>q;
    for(int i=0;i<3*MAX;i++){
        tree[i].r0=0;
        tree[i].r1=0;
        tree[i].r2=0;
        lazy[i]=0;
    }
    build(0,0,n-1);
    for(int i=0;i<q;i++){
        cin>>y>>a>>b;
        if(y) cout<<query(0,0,n-1,a,b)<<"\n";
        else update(0,0,n-1,a,b);
    }
	return 0;
} 
