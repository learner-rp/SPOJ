// BITMAP - Bitmap

#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define deb(x) cout<<#x<<" "<<x<<"\n";
#define fo(i,a,b) for(i=a;i<b;i++)
const int inf=1e8;
 
string screen[201];
int ans[201][201],n,m;
bool vis[201][201];
 
bool ispossible(int i,int j){
    if(i<0||j<0) return false;
    if(i>=n||j>=m) return false;
    if(screen[i][j]=='1') return false;
    if(vis[i][j]) return false;
    return true;
}
 
void getans(int i,int j){
   queue<pair<int,int>> q;
   q.emplace(i,j);
   vis[i][j]=true;
   ans[i][j]=0;
   while(!q.empty()){
       pair<int,int> p=q.front();
       int a=p.first;
       int b=p.second;
       q.pop();
       if(ispossible(a,b+1)){
           vis[a][b+1]=true;
           q.emplace(a,b+1);
           ans[a][b+1]=min(ans[a][b+1],1+ans[a][b]);
       }
       if(ispossible(a,b-1)){
           vis[a][b-1]=true;
           q.emplace(a,b-1);
           ans[a][b-1]=min(ans[a][b-1],1+ans[a][b]);
       }
       if(ispossible(a+1,b)){
           vis[a+1][b]=true;
           q.emplace(a+1,b);
           ans[a+1][b]=min(ans[a+1][b],1+ans[a][b]);
       }
       if(ispossible(a-1,b)){
           vis[a-1][b]=true;
           q.emplace(a-1,b);
           ans[a-1][b]=min(ans[a-1][b],1+ans[a][b]);
       }
   }
}
 
int main(){
    int t;
    cin>>t;
    while(t--){
        int i,j;
        cin>>n>>m;
        fo(i,0,201)
            fo(j,0,201) 
                ans[i][j]=inf;
        memset(vis,false,sizeof(vis));
        fo(i,0,n) cin>>screen[i];
        fo(i,0,n)
            fo(j,0,m)
                if(screen[i][j]=='1'){
                    memset(vis,false,sizeof(vis));
                    getans(i,j);
                }
        fo(i,0,n)
            fo(j,0,m)
                cout<<ans[i][j]<<" \n"[j==m-1];
    }
    return 0;
}
